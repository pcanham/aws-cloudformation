{
  "Description": "AZ2Pub2Priv2-HA-NAT", 
  "Mappings": {
    "NatAmi": {
      "ap-northeast-1": {
        "AMI": "ami-18869819"
      }, 
      "ap-southeast-1": {
        "AMI": "ami-96bb90c4"
      }, 
      "ap-southeast-2": {
        "AMI": "ami-96bb90c4"
      }, 
      "eu-central-1": {
        "AMI": "ami-04003319"
      }, 
      "eu-west-1": {
        "AMI": "ami-9d23aeea"
      }, 
      "sa-east-1": {
        "AMI": "ami-af9925b2"
      }, 
      "us-east-1": {
        "AMI": "ami-146e2a7c"
      }, 
      "us-west-1": {
        "AMI": "ami-42908907"
      }, 
      "us-west-2": {
        "AMI": "ami-dfc39aef"
      }
    }
  }, 
  "Outputs": {
    "NatEip1": {
      "Description": "AWS Elastic IP of the NAT instance 1", 
      "Value": {
        "Ref": "NatEip1"
      }
    }, 
    "NatEip2": {
      "Description": "AWS Elastic IP of the NAT instance 2", 
      "Value": {
        "Ref": "NatEip2"
      }
    }
  }, 
  "Parameters": {
    "AvailabilityZone1": {
      "AllowedPattern": "[-a-zA-Z0-9]*", 
      "ConstraintDescription": "Alphanumeric characters and dashes only", 
      "Default": "eu-central-1a", 
      "Description": "Availability Zone name", 
      "MaxLength": "15", 
      "MinLength": "10", 
      "Type": "String"
    }, 
    "AvailabilityZone2": {
      "AllowedPattern": "[-a-zA-Z0-9]*", 
      "ConstraintDescription": "Alphanumeric characters and dashes only", 
      "Default": "eu-central-1b", 
      "Description": "Availability Zone name", 
      "MaxLength": "15", 
      "MinLength": "10", 
      "Type": "String"
    }, 
    "KeyName": {
      "AllowedPattern": "[-_ a-zA-Z0-9]*", 
      "ConstraintDescription": "Alphanumeric characters, underscores, dashes only", 
      "Description": "Existing key pair to access instances", 
      "MaxLength": "64", 
      "MinLength": "1", 
      "Type": "String"
    }, 
    "NatInstanceType": {
      "AllowedValues": [
        "t2.micro", 
        "t2.small", 
        "t2.medium", 
        "m3.medium", 
        "m3.large", 
        "m3.xlarge"
      ], 
      "ConstraintDescription": "Instance type must be of a valid EC2 type", 
      "Default": "t2.micro", 
      "Description": "EC2 instance type for NAT instances", 
      "Type": "String"
    }
  }, 
  "Resources": {
    "NATRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
        "PolicyName": "NAT_Takeover",
        "PolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Action": [
                        "ec2:DescribeInstances",
                        "ec2:DescribeRouteTables",
                        "ec2:CreateRoute",
                        "ec2:ReplaceRoute",
                        "ec2:StartInstances",
                        "ec2:StopInstances"
                   ],
                   "Effect": "Allow",
                   "Resource": "*"
                } ]
             }
             } ]
        }
    },
    "NATRoleProfile": {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [ {
             "Ref": "NATRole"
          } ]
       }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    }, 
    "NatEip1": {
      "DependsOn": "VPCGatewayAttachment", 
      "Properties": {
        "Domain": "vpc", 
        "InstanceId": {
          "Ref": "NatInstance1"
        }
      }, 
      "Type": "AWS::EC2::EIP"
    }, 
    "NatEip2": {
      "DependsOn": "VPCGatewayAttachment", 
      "Properties": {
        "Domain": "vpc", 
        "InstanceId": {
          "Ref": "NatInstance2"
        }
      }, 
      "Type": "AWS::EC2::EIP"
    }, 
    "NatInstance1": {
      "DependsOn": "InternetGateway", 
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "NatAmi", 
            {
              "Ref": "AWS::Region"
            }, 
            "AMI"
          ]
        }, 
        "InstanceType": {
          "Ref": "NatInstanceType"
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ], 
        "SourceDestCheck": "false", 
        "IamInstanceProfile" : {
          "Ref" : "NATRoleProfile"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }, 
        "Tags": [
          {
            "Key": "Name", 
            "Value": { "Fn::Join" : [ "", [ "Nat1: ", {"Ref":"AvailabilityZone1"}]]}
          }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws*\n",
          ". /etc/profile.d/aws-apitools-common.sh\n",
          "# Configure iptables\n",
          "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
          "/sbin/iptables-save > /etc/sysconfig/iptables\n",
          "# Configure ip forwarding and redirects\n",
          "echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >  /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
          "mkdir -p /etc/sysctl.d/\n",
          "cat <<EOF > /etc/sysctl.d/nat.conf\n",
          "net.ipv4.ip_forward = 1\n",
          "net.ipv4.conf.eth0.send_redirects = 0\n",
          "EOF\n",
          "# Download nat_monitor.sh and configure\n",
          "cd /root\n",
          "wget http://stevemorad.s3.amazonaws.com/reInvent/articles/nat_monitor_files/nat_monitor.sh\n",
          "NAT_ID=\n",
          "# CloudFormation should have updated the PrivateRouteTable2 by now (due to yum update), however loop to make sure\n",
          "while [ \"$NAT_ID\" == \"\" ]; do\n",
          "  sleep 60\n",
          "  NAT_ID=`/opt/aws/bin/ec2-describe-route-tables ", { "Ref" : "PrivateRouteTable2" }, 
          " -U https://ec2.", { "Ref" : "AWS::Region" }, ".amazonaws.com | grep 0.0.0.0/0 | awk '{print $2;}'`\n",
          "  #echo `date` \"-- NAT_ID=$NAT_ID\" >> /tmp/test.log\n",
          "done\n",
          "# Update NAT_ID, NAT_RT_ID, and My_RT_ID\n",
          "sed \"s/NAT_ID=/NAT_ID=$NAT_ID/g\" /root/nat_monitor.sh > /root/nat_monitor.tmp\n",
          "sed \"s/NAT_RT_ID=/NAT_RT_ID=",
          { "Ref" : "PrivateRouteTable2" },
          "/g\" /root/nat_monitor.tmp > /root/nat_monitor.sh\n",
          "sed \"s/My_RT_ID=/My_RT_ID=",
          { "Ref" : "PrivateRouteTable1" },
          "/g\" /root/nat_monitor.sh > /root/nat_monitor.tmp\n",
          "sed \"s/EC2_URL=/EC2_URL=https:\\/\\/ec2.",
          { "Ref" : "AWS::Region" }, ".amazonaws.com",
          "/g\" /root/nat_monitor.tmp > /root/nat_monitor.sh\n",
          "rm -f /root/nat_monitor.tmp\n",
          "chmod a+x /root/nat_monitor.sh\n",
          "echo '@reboot /root/nat_monitor.sh > /tmp/nat_monitor.log' | crontab\n",
          "/root/nat_monitor.sh > /tmp/nat_monitor.log &\n"
        ]]}}
      }, 
      "Type": "AWS::EC2::Instance"
    }, 
    "NatInstance2": {
      "DependsOn": "InternetGateway", 
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "NatAmi", 
            {
              "Ref": "AWS::Region"
            }, 
            "AMI"
          ]
        }, 
        "InstanceType": {
          "Ref": "NatInstanceType"
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroupIds": [
          {
            "Ref": "NatSecurityGroup"
          }
        ], 
        "SourceDestCheck": "false",
        "IamInstanceProfile" : {
          "Ref" : "NATRoleProfile"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }, 
        "Tags": [
          {
            "Key": "Name", 
            "Value": { "Fn::Join" : [ "", [ "Nat2: ", {"Ref":"AvailabilityZone2"}]]}
          }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws*\n",
          "# Configure iptables\n",
          "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\n",
          "/sbin/iptables-save > /etc/sysconfig/iptables\n",
          "# Configure ip forwarding and redirects\n",
          "echo 1 >  /proc/sys/net/ipv4/ip_forward && echo 0 >  /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
          "mkdir -p /etc/sysctl.d/\n",
          "cat <<EOF > /etc/sysctl.d/nat.conf\n",
          "net.ipv4.ip_forward = 1\n",
          "net.ipv4.conf.eth0.send_redirects = 0\n",
          "EOF\n",
          "# Download nat_monitor.sh and configure\n",
          "cd /root\n",
          "wget http://stevemorad.s3.amazonaws.com/reInvent/articles/nat_monitor_files/nat_monitor.sh\n",
          "# Update NAT_ID, NAT_RT_ID, and My_RT_ID\n",
          "sed \"s/NAT_ID=/NAT_ID=",
          { "Ref" : "NatInstance1" },
          "/g\" /root/nat_monitor.sh > /root/nat_monitor.tmp\n",
          "sed \"s/NAT_RT_ID=/NAT_RT_ID=",
          { "Ref" : "PrivateRouteTable1" },
          "/g\" /root/nat_monitor.tmp > /root/nat_monitor.sh\n",
          "sed \"s/My_RT_ID=/My_RT_ID=",
          { "Ref" : "PrivateRouteTable2" },
          "/g\" /root/nat_monitor.sh > /root/nat_monitor.tmp\n",
          "sed \"s/EC2_URL=/EC2_URL=https:\\/\\/ec2.",
          { "Ref" : "AWS::Region" }, ".amazonaws.com",
          "/g\" /root/nat_monitor.tmp > /root/nat_monitor.sh\n",
          "rm -f /root/nat_monitor.tmp\n",
          "chmod a+x /root/nat_monitor.sh\n",
          "echo '@reboot /root/nat_monitor.sh > /tmp/nat_monitor.log' | crontab\n",
          "/root/nat_monitor.sh >> /tmp/nat_monitor.log &\n"
        ]]}}        
      }, 
      "Type": "AWS::EC2::Instance"
    }, 
    "NatSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow NAT access from the VPC", 
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "80", 
            "IpProtocol": "tcp", 
            "ToPort": "80"
          }, 
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "443", 
            "IpProtocol": "tcp", 
            "ToPort": "443"
          }
        ], 
        "SecurityGroupIngress": [
          {}, 
          {
            "CidrIp": "10.10.247.0/24", 
            "FromPort": "80", 
            "IpProtocol": "tcp", 
            "ToPort": "80"
          }, 
          {
            "CidrIp": "10.10.247.0/24", 
            "FromPort": "443", 
            "IpProtocol": "tcp", 
            "ToPort": "443"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "PrivateRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "InstanceId": {
          "Ref": "NatInstance1"
        }, 
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PrivateRoute2": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "InstanceId": {
          "Ref": "NatInstance2"
        }, 
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PrivateRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PrivateRouteTable2": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PrivateSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        }, 
        "CidrBlock": "10.10.247.128/26", 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PrivateSubnet2": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone2"
        }, 
        "CidrBlock": "10.10.247.192/26", 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PrivateSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }, 
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "PrivateSubnetRouteTableAssociation2": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }, 
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "PublicRoute1": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "GatewayId": {
          "Ref": "InternetGateway"
        }, 
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PublicRoute2": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "GatewayId": {
          "Ref": "InternetGateway"
        }, 
        "RouteTableId": {
          "Ref": "PublicRouteTable2"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PublicRouteTable1": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PublicRouteTable2": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PublicSubnet1": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone1"
        }, 
        "CidrBlock": "10.10.247.0/26", 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PublicSubnet2": {
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone2"
        }, 
        "CidrBlock": "10.10.247.64/26", 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PublicSubnetRouteTableAssociation1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable1"
        }, 
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "PublicSubnetRouteTableAssociation2": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable2"
        }, 
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "VPC": {
      "Properties": {
        "CidrBlock": "10.10.247.0/24"
      }, 
      "Type": "AWS::EC2::VPC"
    }, 
    "VPCGatewayAttachment": {
      "DependsOn": "InternetGateway", 
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }, 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
  }
}